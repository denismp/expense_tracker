"""
Django settings for expense_tracker project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
import sys

# Load environment variables from .env file
load_dotenv()

# Determine if the app is running from a PyInstaller bundle and set BASE_DIR
if getattr(sys, 'frozen', False):
    BASE_DIR = sys._MEIPASS
else:
    try:
        BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
        if 'site-packages' in str(BASE_DIR):
            BASE_DIR = Path(__file__).resolve().parent
    except Exception:
        BASE_DIR = Path(__file__).resolve().parent.parent

# Set DEBUG and ALLOWED_HOSTS based on whether the app is bundled
if getattr(sys, 'frozen', False):
    DEBUG = False
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
else:
    DEBUG = True
    ALLOWED_HOSTS = []

# Quick-start development settings - unsuitable for production
SECRET_KEY = 'django-insecure-1b=937ambjdl8y6x2)o@iv(abx(99x(-+%j2*hjm@xuob%ex=-'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'expense_tracker.apps.accounts',
    'expense_tracker.apps.expenses',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'expense_tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'expense_tracker'),
            os.path.join(BASE_DIR, 'expense_tracker', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'debug': DEBUG,
        },
    },
]

WSGI_APPLICATION = 'expense_tracker.wsgi.application'

# ‚úÖ Database configuration
if getattr(sys, 'frozen', False):
    # Use the bundled app path provided at runtime
    db_path = os.environ.get("DJANGO_DB_PATH")
    if db_path:
        print(f"üìÅ Using bundled app DB at: {db_path}")
    else:
        db_path = os.path.join(BASE_DIR, 'db.sqlite3')
        print(f"‚ö†Ô∏è DJANGO_DB_PATH not set. Falling back to: {db_path}")

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': db_path,
        }
    }

elif os.getenv("USE_POSTGRES", "false").lower() == "true":
    print("‚ö†Ô∏è Using PostgreSQL instead of SQLite (USE_POSTGRES is set to true).")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv("DB_NAME", "expense_tracker_db"),
            'USER': os.getenv("DB_USER", "expense_user"),
            'PASSWORD': os.getenv("DB_PASSWORD", "your_secure_password"),
            'HOST': os.getenv("DB_HOST", "localhost"),
            'PORT': os.getenv("DB_PORT", "5432"),
        }
    }

else:
    # Default local dev setup
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # For collectstatic

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.CustomUser'
LOGIN_REDIRECT_URL = '/expenses/'
